A type guard is a TypeScript technique used to get information about the type of a variable, usually within a conditional block. Type guards are regular functions that return a boolean, taking a type and telling TypeScript if it can be narrowed down to something more specific. Type guards have the unique property of assuring that the value tested is of a set type depending on the returned boolean.

here are 4 major ways to use a type guard:

The instanceof keyword
The typeof keyword
The in keyword
Custom type guard with predicate
discriminated union
exhaustive check